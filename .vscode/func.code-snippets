{
	// Place your sy-f-misc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"FMiscPlugin Load and Unload": {
		"prefix": "func",
		"body": [
		  "import type FMiscPlugin from \"@/index\";",
		  "",
		  "export let name = \"$1\";",
		  "export let enabled = false;",
		  "",
		  "// Optional: Configure module settings",
		  "export const declareToggleEnabled = {",
		  "\ttitle: \"$2\",",
		  "\tdescription: \"$3\",",
		  "\tdefaultEnabled: false",
		  "};",
		  "",
		  "// Optional: Declare settings panel",
		  "export const declareSettingPanel = [",
		  "\t{",
		  "\t\tkey: \"$4\",",
		  "\t\ttitle: \"$5\",",
		  "\t\telement: () => null",
		  "\t}",
		  "];",
		  "",
		  "// Optional: Declare simple module config",
		  "export const declareModuleConfig = {",
		  "\tkey: \"$6\",",
		  "\titems: [],",
		  "\tload: (itemValues?: Record<string, any>) => {",
		  "\t\t// Initialize config here",
		  "\t}",
		  "};",
		  "",
		  "export const load = (plugin: FMiscPlugin) => {",
		  "\tif (enabled) return;",
		  "\tenabled = true;",
		  "\t$7",
		  "};",
		  "",
		  "export const unload = (plugin: FMiscPlugin) => {",
		  "\tif (!enabled) return;",
		  "\tenabled = false;",
		  "\t$8",
		  "};"
		],
		"description": "Load and unload functions for FMiscPlugin."
	}
}